#!/usr/bin/env python
# encoding: utf-8
"""
@author: w-devin
@contact: Mr.wyw@foxmail.com
@file: detector.py
@time: 10/24/2020 01:50
@desc:
"""

import os
import sys

import yara

from constant import *
from log_printer import *


class Detector(object):
    def __init__(self):
        # get rules path
        self.rules_path = dict()
        try:
            self.rules_path = Detector.load_rules(RULES_PATH)
        except Exception as e:
            error('load rules failed, {}'.format(e))
            exit(-1)
        else:
            if not self.rules_path:
                warning('no rules... exiting')
                exit(0)

            for rule_path in self.rules_path:
                bingo('load {} {} rules'.format(len(self.rules_path[rule_path]), rule_path))

        # compile rules
        self.rules = dict()
        try:
            self.rules = Detector.compile_rules(self.rules_path)
        except Exception as e:
            error('compile rules failed, {}'.format(e))
            exit(-1)

    @classmethod
    def load_rules(cls, rules_path):
        info('loading rules from [{}]...'.format(rules_path))

        ret = dict()
        for root, dirs, files in os.walk(rules_path):
            for file_name in files:
                if not file_name.endswith(('.yara', '.yar')):
                    continue

                this_type = file_name.split('_')[0].upper()
                if this_type in RECORD_TYPES:
                    ret.setdefault(this_type, dict())
                    ret[this_type][file_name] = os.path.join(root, file_name)

        return ret

    @classmethod
    def compile_rules(cls, rules):
        info('compiling rules...')

        ret = dict()
        for rule_type in rules:
            try:
                ret[rule_type] = yara.compile(filepaths=rules[rule_type])
            except Exception as e:
                warning('{} rules compile failed, {}'.format(rule_type, e))
            else:
                bingo('{} type rules compiled succeed!'.format(rule_type))

        return ret

    def detect(self, payload, record_type):
        """
        detect payload
        :param payload: file path if record_type is 'file', string if record_type is others
        :param record_type: one of RECORD_TYPES
        :return: detect result
        """
        if not record_type in RECORD_TYPES:
            warning('not support {}'.format(record_type))

        if record_type == 'FILE':
            if not os.path.isfile(payload):
                warning('{} is not a file'.format(payload))
                return None

            info('scanning {}'.format(payload))
            try:
                return self.rules[record_type].match(filepath=payload)
            except Exception as e:
                warning('{} scan failed, {}'.format(payload, e))
