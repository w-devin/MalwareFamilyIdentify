#!/usr/bin/env python
# encoding: utf-8
"""
@author: w-devin
@contact: Mr.wyw@foxmail.com
@file: detector.py
@time: 10/24/2020 01:50
@desc:
"""

import os
import sys

import yara

from constant import *
from log_printer import *


class Detector(object):
    def __init__(self):
        # get rules path
        self.rules_path = dict()
        try:
            self.rules_path = Detector.load_rules(RULES_PATH)
        except Exception as e:
            error('Load rules failed, {}'.format(e))
            exit(-1)
        else:
            if not self.rules_path:
                warning('No rules... exiting')
                exit(0)

            bingo('Load {} rules'.format(len(self.rules_path)))

        # compile rules
        self.rules = dict()
        try:
            self.rules = Detector.compile_rules(self.rules_path)
        except Exception as e:
            error('Compile rules failed, {}'.format(e))
            exit(-1)

    @classmethod
    def load_rules(cls, rules_path):
        info('Loading rules from [{}]...'.format(rules_path))

        ret = dict()
        for root, dirs, files in os.walk(rules_path):
            for filename in files:
                if not filename.endswith(YARA_FILE_TYPES):
                    continue

                ret[os.path.join(root, filename)] = os.path.join(root, filename)

        return ret

    @classmethod
    def compile_rules(cls, rules):
        info('Compiling rules...')

        ret = None
        try:
            ret = yara.compile(filepaths=rules)
        except Exception as e:
            warning('Rules compile failed, {}'.format(e))
            exit(-1)
        else:
            bingo('Rules compiled succeed!')

        return ret

    def detect(self, payload, record_type=FILE):
        """
        detect payload
        :param payload: file path if record_type is 'file', string if record_type is others
        :param record_type: one of RECORD_TYPES
        :return: detect result
        """
        if not record_type in RECORD_TYPES:
            warning('Not support {}'.format(record_type))

        if record_type == FILE:
            if not os.path.isfile(payload):
                warning('{} is not a file'.format(payload))
                return None

            try:
                info('Scanning file: {}'.format(payload))
                return self.rules.match(filepath=payload)
            except Exception as e:
                warning('{} scan failed, {}'.format(payload, e))
        elif record_type == PAYLOAD:
            info('Scanning payload: {}'.format(payload))
            return self.rules.match(data=payload)
